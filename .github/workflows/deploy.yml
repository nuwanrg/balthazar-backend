name: Deploy to AWS Fargate

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: balthazar-backend
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Install AWS CLI and ECS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
          sudo curl -Lo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
          sudo chmod +x /usr/local/bin/ecs-cli

      - name: Create ECS Service if it doesn't exist
        env:
          AWS_REGION: ap-southeast-2
          CLUSTER_NAME: balthazar-cluster
          SERVICE_NAME: balthazar-backend-service
          TASK_DEFINITION: balthazar-task
          SUBNET_ID: subnet-0ab2124445e116c31
          SECURITY_GROUP_ID: sg-0e1be39336e6b9288
        run: |
          SERVICE_EXISTS=$(aws ecs describe-services --cluster ${CLUSTER_NAME} --services ${SERVICE_NAME} --query 'services[0].status' --output text || echo "MISSING")
          if [ "$SERVICE_EXISTS" == "MISSING" ]; then
            echo "Creating ECS service..."
            aws ecs create-service --cluster ${CLUSTER_NAME} --service-name ${SERVICE_NAME} --task-definition ${TASK_DEFINITION} --desired-count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_ID}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp='ENABLED'}"
          else
            echo "ECS service already exists."
          fi

      - name: Register Task Definition and Update ECS Service
        env:
          AWS_REGION: ap-southeast-2
          CLUSTER_NAME: balthazar-cluster
          SERVICE_NAME: balthazar-backend-service
          TASK_DEFINITION: balthazar-task
          CONTAINER_NAME: balthazar-backend
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: balthazar-backend
          IMAGE_TAG: latest
        run: |
          # Create the task definition JSON file
          cat <<EOF > taskdef.json
          {
            "family": "${TASK_DEFINITION}",
            "networkMode": "awsvpc",
            "executionRoleArn": "arn:aws:iam::727210836757:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "${CONTAINER_NAME}",
                "image": "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}",
                "memory": 512,
                "cpu": 256,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/${SERVICE_NAME}",
                    "awslogs-region": "${AWS_REGION}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF

          # Register the task definition
          aws ecs register-task-definition --cli-input-json file://taskdef.json

          # Update the ECS service to use the new task definition
          aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --force-new-deployment
